package com.izhuixin.rsps.filter;

import com.izhuixin.rsps.util.VerifyKey;
import com.netflix.zuul.ZuulFilter;
import com.netflix.zuul.context.RequestContext;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.netflix.zuul.filters.support.FilterConstants;
import org.springframework.stereotype.Component;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;

@Component
public class TokenCheckFilter extends ZuulFilter {

    private static final Logger LOG = LoggerFactory.getLogger(TokenCheckFilter.class);

    @Override
    public String filterType() {
        return FilterConstants.PRE_TYPE;
    }

    @Override
    public int filterOrder() {
        return FilterConstants.PRE_DECORATION_FILTER_ORDER + 1;//int值来定义过滤器的执行顺序，数值越小优先级越高
    }

    @Override
    public boolean shouldFilter() {
        return true;
    }

    @Override
    public Object run() {

        RequestContext ctx = RequestContext.getCurrentContext();
        HttpServletRequest request = ctx.getRequest();
        String pathInfo = request.getRequestURI();

        LOG.info("send {} request to {}",request.getMethod(),request.getRequestURL().toString());

        if (pathInfo.startsWith("/assets") ||
                pathInfo.startsWith("/custom/guide") ||
                pathInfo.startsWith("/custom/register") ||
                pathInfo.startsWith("/custom/forget") ||
                pathInfo.startsWith("/api/wms") ||
                pathInfo.startsWith("/api/v1") ||
                pathInfo.startsWith("/enterprise/v1")
                ) { // 不需要过滤
            return null;
        }

        String serviceId = (String)ctx.get("serviceId");
        Claims claims=null;

        boolean isTokenValid = false;
        boolean isPermissonValid = false;

        if(!pathInfo.contains("login")) {

            // 获取token
            String authorization = null;
            String token = null;
            if (pathInfo.startsWith("/manager") || pathInfo.startsWith("/custom")) {  // 管理平台的请求
                Cookie[] cookies = request.getCookies();
                if (cookies != null) {
                    for (Cookie cookie : cookies) {
                        if ("Authorization".equals(cookie.getName())) {
                            try {
                                authorization = URLDecoder.decode(cookie.getValue(), "utf-8");
                            } catch (UnsupportedEncodingException e) {
                                LOG.error("解析token出现异常", e);
                            }
                            break;
                        }
                    }
                }
            } else {
                authorization = request.getHeader("Authorization");
            }

            if(null != authorization) {
                String[] g = authorization.split(" ");
                if(g.length > 1) {
                    token = g[1];
                }
            }

            if (null != token) {
                try {
                    // 解析token
                    claims = Jwts.parser().setSigningKey(VerifyKey.getPublicKey()).parseClaimsJws(token).getBody();
                    //request.getSession().setAttribute("claims", claims.get("user_name"));
                    //request.setAttribute("aaa", claims.get("user_name"));

                    // 判断权限与访问路径是否匹配
                    ArrayList<String> arAuth = (ArrayList<String>)claims.get("authorities");
                    if (arAuth != null) {
                        for (String authPath:arAuth) {
                            String startPath = authPath.replaceAll("\\*", "");
                            startPath = startPath.substring(0, startPath.length() - 1);
                            if (pathInfo.startsWith(startPath)) {
                                isTokenValid = true;
                                ctx.addZuulRequestHeader("Username", (String) claims.get("user_name"));
                                break;
                            }
                        }
                    }
                    isPermissonValid = true;

                } catch (Exception e) {
                    //don't trust the JWT!
                    e.printStackTrace();
                }
            }
        }
        else{
            return null;
        }

        /* 过滤处理未认证或认证不匹配请求 */
        if(!isTokenValid) {
            if (pathInfo.startsWith("/api")) {
                String modifiedRequestPath = "/v2/access/invalid";
                ctx.put(FilterConstants.REQUEST_URI_KEY, modifiedRequestPath);
                /*
                //不需要进行路由，也就是不会调用api服务提供者
                ctx.setSendZuulResponse(false);
                ctx.setResponseStatusCode(401);
                //可以把一些值放到ctx中，便于后面的filter获取使用
                ctx.set("isOK", false);
                //返回内容给客户端
                ctx.getResponse().setContentType("application/json;charset=UTF-8");
                ctx.setResponseBody("{\"result\":\"pre01Filter auth not correct!\"}");
                */
            }
            else if (pathInfo.startsWith("/manager")) {
                Object originalRequestPath = ctx.get(FilterConstants.REQUEST_URI_KEY);

                if (isPermissonValid) {
                    String modifiedRequestPath = "/accessDenied";
                    ctx.put(FilterConstants.REQUEST_URI_KEY, modifiedRequestPath);
                } else {
                    String modifiedRequestPath = "/manager/login";
                    ctx.put(FilterConstants.REQUEST_URI_KEY, modifiedRequestPath);
                }
            }
            else if (pathInfo.startsWith("/custom")) {
                Object originalRequestPath = ctx.get(FilterConstants.REQUEST_URI_KEY);

                String modifiedRequestPath = "/custom/login";
                ctx.put(FilterConstants.REQUEST_URI_KEY, modifiedRequestPath);
            }
        }
        return null;
    }
}