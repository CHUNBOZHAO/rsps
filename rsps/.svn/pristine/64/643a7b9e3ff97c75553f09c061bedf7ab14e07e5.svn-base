package com.izhuixin.rsps.service.impl;

import com.google.common.base.Optional;
import com.google.common.collect.Maps;
import com.izhuixin.rsps.common.constant.BoxStatus;
import com.izhuixin.rsps.common.dba.AbstractCrudService;
import com.izhuixin.rsps.common.dba.FilterExample;
import com.izhuixin.rsps.common.vo.web.BoxBaseInfoVO;
import com.izhuixin.rsps.common.vo.web.DataTableReqDataVO;
import com.izhuixin.rsps.common.vo.web.DataTableResDataVO;
import com.izhuixin.rsps.dao.manual.BoxBaseDao;
import com.izhuixin.rsps.dao.manual.BoxInfoDao;
import com.izhuixin.rsps.dao.manual.BoxTypeDao;
import com.izhuixin.rsps.dao.manual.EnterpriseDao;
import com.izhuixin.rsps.domain.automatic.BoxBaseDO;
import com.izhuixin.rsps.domain.manual.BoxBaseInfo;
import com.izhuixin.rsps.service.BoxBaseService;
import com.izhuixin.rsps.service.BoxInfoService;
import com.izhuixin.rsps.service.BoxRecordService;
import com.izhuixin.rsps.service.EnterpriseService;
import org.apache.commons.lang.StringUtils;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Service
public class BoxBaseServiceImpl extends AbstractCrudService<BoxBaseDO> implements BoxBaseService {

    @Autowired
    private EnterpriseService enterpriseService;
    @Autowired
    private BoxBaseDao boxBaseDao;
    @Autowired
    private EnterpriseDao enterpriseDao;
    @Autowired
    private BoxTypeDao boxTypeDao;
    @Autowired
    private BoxInfoService boxInfoService;
    @Autowired
    private BoxInfoDao boxInfoDao;
    /**
     * 通过boxId获取rfid(epcId)
     * @param rfid -- epcId或tid
     * @return
     */
    @Override
    public String getBoxId(String rfid) {
        String boxId = "";

        FilterExample fe = new FilterExample();
        FilterExample.Criteria criteria = fe.createCriteria();
        criteria.andFieldEqualTo("epc", rfid);
        fe.or().andFieldEqualTo("tid", rfid);

        try {
            Optional<BoxBaseDO> optional = get(fe);
            if (optional.isPresent()) {
                boxId = optional.get().getRfid();
            }
        } catch (Exception e) {
            logger.error(String.format("通过包装箱ID(%s)获取rfid出现异常", rfid), e);
        }
        return boxId;
    }

    /**
     * 通过Ble获取boxId
     * @param bleMac
     * @return
     */
    @Override
    public String getBoxIdByBle(String bleMac) {
        String boxId = "";

        FilterExample fe = new FilterExample();
        fe.createCriteria().andFieldEqualTo("uuid", bleMac);
        try {
            Optional<BoxBaseDO> optional = get(fe);
            if (optional.isPresent()) {
                boxId = optional.get().getRfid();
            }
        } catch (Exception e) {
            logger.error(String.format("通过包装箱bleMac(%s)获取boxId出现异常", bleMac), e);
        }
        return boxId;
    }

    /**
     * 通过包装箱ID获取TID -- 以后boxId是系统自动生成的ID
     * @param boxId
     * @return
     */
    @Override
    public String getTidFromBoxId(String boxId) {
        String tid = "";
        FilterExample fe = new FilterExample();
        fe.createCriteria().andFieldEqualTo("rfid", boxId);
        try {
            Optional<BoxBaseDO> optional = get(fe);
            if (optional.isPresent()) {
                tid = optional.get().getTid();
            }
        } catch (Exception e) {
            logger.error(String.format("通过包装箱ID(%s)获取tid出现异常", boxId), e);
        }
        return tid;
    }

    /**
     * 获取rfid -- tid的Map集合
     * @param entCode
     * @return
     */
    @Override
    public Map<String, String> getBoxIdMap(String entCode) {

        String entId = enterpriseService.getEntIdByEntCode(entCode.replaceAll("_",""));
        FilterExample fe = new FilterExample();
        FilterExample.Criteria criteria = fe.createCriteria();
        if (StringUtils.isNotBlank(entId)) {
            criteria.andFieldEqualTo("ent_id", entId);
        }
        List<BoxBaseDO> baseDOList = getList(fe);
        Map<String, String> idMap = Maps.newHashMap();
        for (BoxBaseDO item : baseDOList) {
            idMap.put(item.getRfid(), item.getTid());
        }
        return idMap;
    }

    @Override
    public List<BoxBaseInfoVO> getAllBoxBase() {
       List<BoxBaseInfoVO> boxBaseInfoVOS = new ArrayList<>();
       SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
       try{
           List<BoxBaseInfo> boxBaseInfos = boxBaseDao.getAllBoxBaseInfo();
           for (BoxBaseInfo boxBaseInfo :boxBaseInfos) {
               BoxBaseInfoVO boxBaseInfoVO = new BoxBaseInfoVO();
               boxBaseInfoVO.setId(boxBaseInfo.getId());
               boxBaseInfoVO.setRfid(boxBaseInfo.getRfid());
               boxBaseInfoVO.setType(boxBaseInfo.getType());
               boxBaseInfoVO.setEntName(enterpriseDao.getEnterpriseInfoByEntId(boxBaseInfo.getEntId()).getEntName());
               boxBaseInfoVO.setUuid(boxBaseInfo.getUuid());
               boxBaseInfoVO.setCreateTime(simpleDateFormat.format(boxBaseInfo.getCreateTime()));
               boxBaseInfoVO.setSoftwareVersion(boxBaseInfo.getSoftwareVersion());
               boxBaseInfoVO.setHardwareVersion(boxBaseInfo.getHardwareVersion());
               boxBaseInfoVOS.add(boxBaseInfoVO);
           }
       }catch (Exception e){
           logger.error(String.format("获取包装箱错误", ""), e);
       }

        return boxBaseInfoVOS;
    }

    @Override
    public boolean saveBox(BoxBaseInfoVO boxBaseInfoVO){

        boolean flag = false;
        try{

            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            BoxBaseInfo boxBaseInfo = new BoxBaseInfo();
            boxBaseInfo.setId(boxBaseInfoVO.getId());
            boxBaseInfo.setRfid(boxBaseInfoVO.getRfid());
            boxBaseInfo.setType(boxBaseInfoVO.getType());
            boxBaseInfo.setEntId(enterpriseDao.getEnterpriseInfoByEntName(boxBaseInfoVO.getEntName()).getEntId());
            boxBaseInfo.setUuid(boxBaseInfoVO.getUuid());
            boxBaseInfo.setCreateTime(simpleDateFormat.parse(boxBaseInfoVO.getCreateTime()));
            boxBaseInfo.setSoftwareVersion(boxBaseInfoVO.getSoftwareVersion());
            boxBaseInfo.setHardwareVersion(boxBaseInfoVO.getHardwareVersion());
            Integer id = boxBaseInfo.getId();
            if(id==null){
                //保存
                boxBaseDao.saveBox(boxBaseInfo);
            }else {
                //编辑
                boxBaseDao.updateBox(boxBaseInfo);
            }
            flag = true;
        }catch (Exception e){
            logger.error(String.format("保存包装箱失败(%s)",boxBaseInfoVO.getId()),e);
        }

        return flag;
    }

    @Override
    public boolean checkRfid(String rfid, Integer id) {
        boolean flag = false;
        try{
            if(id==null){
                //保存时校验重名
                if(boxBaseDao.checkRfidForSave(rfid)>=1){
                    flag = true;
                }
            }else{
                //编辑时校验重名
                if(boxBaseDao.checkRfidForUpdate(rfid,id)>=1){
                    flag = true;
                }
            }

        }catch (Exception e){
            logger.error(String.format("校验失败(%s)",rfid+" "+id),e);
        }


        return flag;
    }

    @Override
    public boolean deleteBox(String id) {
        return boxBaseDao.deleteBox(id);
    }

    @Override
    public BoxBaseInfoVO getBoxBaseById(Integer id) {

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        BoxBaseInfoVO boxBaseInfoVO = new BoxBaseInfoVO();
        BoxBaseInfo boxBaseInfo = boxBaseDao.getBoxBaseInfoById(id);
        boxBaseInfoVO.setId(boxBaseInfo.getId());
        boxBaseInfoVO.setRfid(boxBaseInfo.getRfid());
        boxBaseInfoVO.setType(boxTypeDao.getBoxType(boxBaseInfo.getRfid()).getSize());
        boxBaseInfoVO.setEntName(enterpriseDao.getEnterpriseInfoByEntId(boxBaseInfo.getEntId()).getEntName());
        boxBaseInfoVO.setUuid(boxBaseInfo.getUuid());
        boxBaseInfoVO.setCreateTime(simpleDateFormat.format(boxBaseInfo.getCreateTime()));
        boxBaseInfoVO.setSoftwareVersion(boxBaseInfo.getSoftwareVersion());
        boxBaseInfoVO.setHardwareVersion(boxBaseInfo.getHardwareVersion());
        return boxBaseInfoVO;
    }

    @Override
    public DataTableResDataVO getBoxBaseInfoByPage(DataTableReqDataVO dataTableReqDataVO) {


        DataTableResDataVO dataTableResDataVO = new DataTableResDataVO();
        List<BoxBaseInfoVO> boxBaseInfoVOS = new ArrayList<>();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try{
            long time1 = System.currentTimeMillis();
            List<BoxBaseInfo> boxBaseInfos = boxBaseDao.getBoxBaseInfoByPage(dataTableReqDataVO.getStart(),dataTableReqDataVO.getLength(),dataTableReqDataVO.getSearch().get(DataTableReqDataVO.Search.value));
            long time2 = System.currentTimeMillis();
            System.err.println(time2-time1);

            for (BoxBaseInfo boxBaseInfo :boxBaseInfos) {
                BoxBaseInfoVO boxBaseInfoVO = new BoxBaseInfoVO();
                boxBaseInfoVO.setId(boxBaseInfo.getId());
                boxBaseInfoVO.setRfid(boxBaseInfo.getRfid());
                boxBaseInfoVO.setType(boxTypeDao.getBoxType(boxBaseInfo.getRfid()).getSize());
                boxBaseInfoVO.setEntName(enterpriseDao.getEnterpriseInfoByEntId(boxBaseInfo.getEntId()).getEntName());
                boxBaseInfoVO.setUuid(boxBaseInfo.getUuid());
                boxBaseInfoVO.setCreateTime(simpleDateFormat.format(boxBaseInfo.getCreateTime()));
                boxBaseInfoVO.setSoftwareVersion(boxBaseInfo.getSoftwareVersion());
                boxBaseInfoVO.setHardwareVersion(boxBaseInfo.getHardwareVersion());
                //循环次数
                boxBaseInfoVO.setCycleIndex(boxInfoDao.getCycleIndexByRfid(boxBaseInfo.getRfid(),enterpriseDao.getEntCodeByEntId(boxBaseInfo.getEntId()).concat("_")));

                //状态
                if(boxInfoService.getBoxInfoByRfid(boxBaseInfo.getRfid(),enterpriseDao.getEntCodeByEntId(boxBaseInfo.getEntId()).concat("_"))!=null){
                    boxBaseInfoVO.setStatus(BoxStatus.getDesc(boxInfoService.getBoxInfoByRfid(boxBaseInfo.getRfid(),enterpriseDao.getEntCodeByEntId(boxBaseInfo.getEntId()).concat("_")).getStatus()));
                }
                boxBaseInfoVOS.add(boxBaseInfoVO);
            }
        }catch (Exception e){
            logger.error(String.format("获取包装箱错误", ""), e);
        }

        dataTableResDataVO.setData(boxBaseInfoVOS);
        dataTableResDataVO.setRecordsTotal(boxBaseDao.getboxCount());
        dataTableResDataVO.setRecordsFiltered(boxBaseDao.countBoxBaseInfoByPage(dataTableReqDataVO.getStart(),dataTableReqDataVO.getLength(),dataTableReqDataVO.getSearch().get(DataTableReqDataVO.Search.value)));
        dataTableResDataVO.setDraw(dataTableReqDataVO.getDraw());

        return dataTableResDataVO;
    }
}
