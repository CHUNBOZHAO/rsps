package com.izhuixin.rsps.controller;


import com.google.gson.Gson;
import com.izhuixin.rsps.AppService;
import com.izhuixin.rsps.constants.CommonOrderRefuseReason;
import com.izhuixin.rsps.domain.*;
import com.izhuixin.rsps.service.feign.AppFeignService;
import com.izhuixin.rsps.service.feign.OrderFeignService;
import com.izhuixin.rsps.service.feign.OrderSourceFeignService;
import com.izhuixin.rsps.util.UploadUtil;
import com.sun.org.apache.xpath.internal.operations.Or;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@RestController
@RequestMapping("v2/")
public class OderController {

    @Value("${img.location}")
    private String location;
    @Value("${img.url}")
    private String url;

    @Autowired
    private OrderFeignService orderFeignService;
    @Autowired
    private OrderSourceFeignService orderSourceFeignService;

    @Autowired
    private AppFeignService appFeignService;

    private static Logger logger = LoggerFactory.getLogger(AppService.class);

    @RequestMapping("orderData/commonOrder/list")
    public String getOrderByMotorId(HttpServletRequest request){

        AppResOrders appResOrders = new AppResOrders();
        String extocol1 = request.getParameter("EXTCOL1");
        try{
            List<AppOrder> orders = new ArrayList<AppOrder>();
            List<Order> order1 = orderFeignService.getAllOrderByMotorId(extocol1);
            for (Order order2 : order1) {
                AppOrder order = new AppOrder();
                order.setJobno(order2.getJobno());
                order.setOrderNO(order2.getOrderNO());
                order.setReCompany(order2.getReCompany());
                order.setReTel(order2.getReTel());
                order.setEirStano(order2.getEirStano());
                order.setEirStation(order2.getEirStation());
                order.setJobnoPcs(order2.getJobnoPcs());
                order.setCreateTime(order2.getCreateTime());
                orders.add(order);
            }
            appResOrders.setAppOrders(orders);
            appResOrders.setStatus(ErrorCode.OK.getIndex());
            appResOrders.setMessage(ErrorCode.OK.getDescr());
            appResOrders.setSize(orders.size());
            appResOrders.setTotal(orders.size());

        }catch (Exception e){
            appResOrders.setStatus(ErrorCode.ERROR.getIndex());
            appResOrders.setMessage(ErrorCode.ERROR.getDescr());
        }

        return new Gson().toJson(appResOrders);
    }

    @RequestMapping(value = "orderData/upload/{entCode}",method = RequestMethod.POST)
    public AppAckContent upload(HttpServletRequest request,@PathVariable("entCode") String entCode) throws Exception{

        AppAckContent appAckContent = new AppAckContent();

        String order = request.getParameter("sbdOrder");

        Gson gson = new Gson();
        SignInfo signInfo = gson.fromJson(order, SignInfo.class);
        System.out.println(signInfo.getCustJobno());

        List<MultipartFile> files = new ArrayList<>();
        //获取图片
        if(request instanceof MultipartHttpServletRequest){

            MultipartHttpServletRequest mureq = (MultipartHttpServletRequest) request;

            MultipartFile file1 = mureq.getFile("image1");
            MultipartFile file2 = mureq.getFile("image2");
            MultipartFile file3 = mureq.getFile("image3");

            if(file1!=null){
                files.add(file1);
            }
            if(file2!=null){
                files.add(file2);
            }
            if(file3!=null){
                files.add(file3);
            }
        }

        List<String> source = new ArrayList<String>();
        //保存图片
        try{
            for (MultipartFile file : files) {
                String name = file.getOriginalFilename();

                UploadUtil.saveImg(file,location,name);
                source.add(url+name); //"baidu.com/a/b.jpg"
                logger.info(url+name);
            }
        }catch (Exception e){
            appAckContent.setStatus("0");
            appAckContent.setMessage("签收失败");
            e.printStackTrace();
        }
        // 格式化时间
        Date date = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String dateStr = simpleDateFormat.format(date);
        //图片路径和签收时间
        signInfo.setSignDateTime(dateStr);
        String reason = signInfo.getEXTCOL1();

        switch (reason){
            case "0" : reason=CommonOrderRefuseReason.DULL_OF_SALE.getDesc(); break ;
            case "1" : reason=CommonOrderRefuseReason.OVERSTOCKED_PRODUCTS.getDesc(); break ;
            case "2" : reason=CommonOrderRefuseReason.RUSH_RED.getDesc(); break ;
            case "3" : reason=CommonOrderRefuseReason.RESUSED.getDesc(); break ;
            case "4" : reason=CommonOrderRefuseReason.PART_SIGN.getDesc(); break ;
            case "5" : reason=CommonOrderRefuseReason.INVOICE_DISCREPANCY.getDesc(); break ;
            case "6" : reason=CommonOrderRefuseReason.OTHERS.getDesc(); break ;
            default : reason="签收"; break ;
        }
        // 签收原因
        if(source!=null){
            //图片路径
            signInfo.setEXTCOL3(source);
        }
        signInfo.setEXTCOL1(reason);

        boolean t = orderFeignService.sendOrder(signInfo);
        System.out.println(t);
        if(t){
            //删除服务器上的图片
            for (MultipartFile file : files) {
                String name = file.getOriginalFilename();
                File file1 = new File(location+name);
                logger.info("图片实际路径"+file1);
                if(file1.exists()){
                    file1.delete();
                }
            }
            appAckContent.setStatus("1");
            appAckContent.setMessage("签收成功");
        }else{
            appAckContent.setStatus("0");
            appAckContent.setMessage("签收失败");
        }

        return appAckContent;
    }
}
